{"ast":null,"code":"import axios from 'axios';\nimport { Order } from '../models';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nclass OrderService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: `${API_BASE_URL}/orders`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor để thêm token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n  }\n\n  // Tạo đơn hàng mới\n  async createOrder(orderData) {\n    try {\n      const response = await this.api.post('/', orderData);\n      return Order.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy danh sách đơn hàng của user\n  async getUserOrders(params = {}) {\n    try {\n      const response = await this.api.get('/my-orders', {\n        params\n      });\n      return response.data.map(order => Order.fromJSON(order));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy đơn hàng theo ID\n  async getOrderById(id) {\n    try {\n      const response = await this.api.get(`/${id}`);\n      return Order.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Cập nhật trạng thái đơn hàng (admin only)\n  async updateOrderStatus(id, status) {\n    try {\n      const response = await this.api.put(`/${id}/status`, {\n        status\n      });\n      return Order.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Hủy đơn hàng\n  async cancelOrder(id) {\n    try {\n      const response = await this.api.put(`/${id}/cancel`);\n      return Order.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy tất cả đơn hàng (admin only)\n  async getAllOrders(params = {}) {\n    try {\n      const response = await this.api.get('/', {\n        params\n      });\n      return response.data.map(order => Order.fromJSON(order));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy thống kê đơn hàng (admin only)\n  async getOrderStats() {\n    try {\n      const response = await this.api.get('/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Xử lý lỗi\n  handleError(error) {\n    if (error.response) {\n      return new Error(error.response.data.message || 'Có lỗi xảy ra từ server');\n    } else if (error.request) {\n      return new Error('Không thể kết nối đến server');\n    } else {\n      return new Error(error.message || 'Có lỗi xảy ra');\n    }\n  }\n}\nexport default new OrderService();","map":{"version":3,"names":["axios","Order","API_BASE_URL","process","env","REACT_APP_API_URL","OrderService","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","createOrder","orderData","response","post","fromJSON","data","handleError","getUserOrders","params","get","map","order","getOrderById","id","updateOrderStatus","status","put","cancelOrder","getAllOrders","getOrderStats","Error","message"],"sources":["D:/frontend/src/services/OrderService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { Order } from '../models';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\nclass OrderService {\r\n  constructor() {\r\n    this.api = axios.create({\r\n      baseURL: `${API_BASE_URL}/orders`,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Request interceptor để thêm token\r\n    this.api.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Tạo đơn hàng mới\r\n  async createOrder(orderData) {\r\n    try {\r\n      const response = await this.api.post('/', orderData);\r\n      return Order.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy danh sách đơn hàng của user\r\n  async getUserOrders(params = {}) {\r\n    try {\r\n      const response = await this.api.get('/my-orders', { params });\r\n      return response.data.map(order => Order.fromJSON(order));\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy đơn hàng theo ID\r\n  async getOrderById(id) {\r\n    try {\r\n      const response = await this.api.get(`/${id}`);\r\n      return Order.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Cập nhật trạng thái đơn hàng (admin only)\r\n  async updateOrderStatus(id, status) {\r\n    try {\r\n      const response = await this.api.put(`/${id}/status`, { status });\r\n      return Order.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Hủy đơn hàng\r\n  async cancelOrder(id) {\r\n    try {\r\n      const response = await this.api.put(`/${id}/cancel`);\r\n      return Order.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy tất cả đơn hàng (admin only)\r\n  async getAllOrders(params = {}) {\r\n    try {\r\n      const response = await this.api.get('/', { params });\r\n      return response.data.map(order => Order.fromJSON(order));\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy thống kê đơn hàng (admin only)\r\n  async getOrderStats() {\r\n    try {\r\n      const response = await this.api.get('/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Xử lý lỗi\r\n  handleError(error) {\r\n    if (error.response) {\r\n      return new Error(error.response.data.message || 'Có lỗi xảy ra từ server');\r\n    } else if (error.request) {\r\n      return new Error('Không thể kết nối đến server');\r\n    } else {\r\n      return new Error(error.message || 'Có lỗi xảy ra');\r\n    }\r\n  }\r\n}\r\n\r\nexport default new OrderService();\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}