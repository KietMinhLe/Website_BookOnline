{"ast":null,"code":"import axios from 'axios';\nimport { User } from '../models';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nclass UserService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: `${API_BASE_URL}/users`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor để thêm token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n  }\n\n  // Đăng ký tài khoản\n  async register(userData) {\n    try {\n      const response = await this.api.post('/register', userData);\n      return {\n        user: User.fromJSON(response.data.user),\n        token: response.data.token\n      };\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Đăng nhập\n  async login(email, password) {\n    try {\n      const response = await this.api.post('/login', {\n        email,\n        password\n      });\n      return {\n        user: User.fromJSON(response.data.user),\n        token: response.data.token\n      };\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Đăng xuất\n  async logout() {\n    try {\n      await this.api.post('/logout');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      return true;\n    } catch (error) {\n      // Ngay cả khi server trả về lỗi, vẫn xóa token local\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      return true;\n    }\n  }\n\n  // Lấy thông tin user hiện tại\n  async getCurrentUser() {\n    try {\n      const response = await this.api.get('/me');\n      return User.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Cập nhật thông tin user\n  async updateProfile(userData) {\n    try {\n      const response = await this.api.put('/profile', userData);\n      return User.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Đổi mật khẩu\n  async changePassword(currentPassword, newPassword) {\n    try {\n      await this.api.put('/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return true;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Quên mật khẩu\n  async forgotPassword(email) {\n    try {\n      await this.api.post('/forgot-password', {\n        email\n      });\n      return true;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Reset mật khẩu\n  async resetPassword(token, newPassword) {\n    try {\n      await this.api.post('/reset-password', {\n        token,\n        newPassword\n      });\n      return true;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy danh sách user (admin only)\n  async getAllUsers(params = {}) {\n    try {\n      const response = await this.api.get('/', {\n        params\n      });\n      return response.data.map(user => User.fromJSON(user));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy user theo ID (admin only)\n  async getUserById(id) {\n    try {\n      const response = await this.api.get(`/${id}`);\n      return User.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Cập nhật user (admin only)\n  async updateUser(id, userData) {\n    try {\n      const response = await this.api.put(`/${id}`, userData);\n      return User.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Xóa user (admin only)\n  async deleteUser(id) {\n    try {\n      await this.api.delete(`/${id}`);\n      return true;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Xử lý lỗi\n  handleError(error) {\n    if (error.response) {\n      return new Error(error.response.data.message || 'Có lỗi xảy ra từ server');\n    } else if (error.request) {\n      return new Error('Không thể kết nối đến server');\n    } else {\n      return new Error(error.message || 'Có lỗi xảy ra');\n    }\n  }\n}\nexport default new UserService();","map":{"version":3,"names":["axios","User","API_BASE_URL","process","env","REACT_APP_API_URL","UserService","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","register","userData","response","post","user","fromJSON","data","handleError","login","email","password","logout","removeItem","getCurrentUser","get","updateProfile","put","changePassword","currentPassword","newPassword","forgotPassword","resetPassword","getAllUsers","params","map","getUserById","id","updateUser","deleteUser","delete","Error","message"],"sources":["D:/frontend/src/services/UserService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { User } from '../models';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\nclass UserService {\r\n  constructor() {\r\n    this.api = axios.create({\r\n      baseURL: `${API_BASE_URL}/users`,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Request interceptor để thêm token\r\n    this.api.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Đăng ký tài khoản\r\n  async register(userData) {\r\n    try {\r\n      const response = await this.api.post('/register', userData);\r\n      return {\r\n        user: User.fromJSON(response.data.user),\r\n        token: response.data.token\r\n      };\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Đăng nhập\r\n  async login(email, password) {\r\n    try {\r\n      const response = await this.api.post('/login', { email, password });\r\n      return {\r\n        user: User.fromJSON(response.data.user),\r\n        token: response.data.token\r\n      };\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Đăng xuất\r\n  async logout() {\r\n    try {\r\n      await this.api.post('/logout');\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      return true;\r\n    } catch (error) {\r\n      // Ngay cả khi server trả về lỗi, vẫn xóa token local\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // Lấy thông tin user hiện tại\r\n  async getCurrentUser() {\r\n    try {\r\n      const response = await this.api.get('/me');\r\n      return User.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Cập nhật thông tin user\r\n  async updateProfile(userData) {\r\n    try {\r\n      const response = await this.api.put('/profile', userData);\r\n      return User.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Đổi mật khẩu\r\n  async changePassword(currentPassword, newPassword) {\r\n    try {\r\n      await this.api.put('/change-password', {\r\n        currentPassword,\r\n        newPassword\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Quên mật khẩu\r\n  async forgotPassword(email) {\r\n    try {\r\n      await this.api.post('/forgot-password', { email });\r\n      return true;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Reset mật khẩu\r\n  async resetPassword(token, newPassword) {\r\n    try {\r\n      await this.api.post('/reset-password', { token, newPassword });\r\n      return true;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy danh sách user (admin only)\r\n  async getAllUsers(params = {}) {\r\n    try {\r\n      const response = await this.api.get('/', { params });\r\n      return response.data.map(user => User.fromJSON(user));\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy user theo ID (admin only)\r\n  async getUserById(id) {\r\n    try {\r\n      const response = await this.api.get(`/${id}`);\r\n      return User.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Cập nhật user (admin only)\r\n  async updateUser(id, userData) {\r\n    try {\r\n      const response = await this.api.put(`/${id}`, userData);\r\n      return User.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Xóa user (admin only)\r\n  async deleteUser(id) {\r\n    try {\r\n      await this.api.delete(`/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Xử lý lỗi\r\n  handleError(error) {\r\n    if (error.response) {\r\n      return new Error(error.response.data.message || 'Có lỗi xảy ra từ server');\r\n    } else if (error.request) {\r\n      return new Error('Không thể kết nối đến server');\r\n    } else {\r\n      return new Error(error.message || 'Có lỗi xảy ra');\r\n    }\r\n  }\r\n}\r\n\r\nexport default new UserService();\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}