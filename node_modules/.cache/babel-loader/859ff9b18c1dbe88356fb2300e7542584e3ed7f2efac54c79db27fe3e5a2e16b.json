{"ast":null,"code":"import axios from 'axios';\nimport { Book } from '../models';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nclass BookService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: `${API_BASE_URL}/books`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor để thêm token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n  }\n\n  // Lấy danh sách tất cả sách\n  async getAllBooks(params = {}) {\n    try {\n      const response = await this.api.get('/', {\n        params\n      });\n      return response.data.map(book => Book.fromJSON(book));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy sách theo ID\n  async getBookById(id) {\n    try {\n      const response = await this.api.get(`/${id}`);\n      return Book.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Tìm kiếm sách\n  async searchBooks(query, filters = {}) {\n    try {\n      const params = {\n        q: query,\n        ...filters\n      };\n      const response = await this.api.get('/search', {\n        params\n      });\n      return response.data.map(book => Book.fromJSON(book));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy sách theo danh mục\n  async getBooksByCategory(categoryId) {\n    try {\n      const response = await this.api.get(`/category/${categoryId}`);\n      return response.data.map(book => Book.fromJSON(book));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy sách bán chạy\n  async getBestSellingBooks(limit = 10) {\n    try {\n      const response = await this.api.get('/bestselling', {\n        params: {\n          limit\n        }\n      });\n      return response.data.map(book => Book.fromJSON(book));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy sách mới nhất\n  async getNewestBooks(limit = 10) {\n    try {\n      const response = await this.api.get('/newest', {\n        params: {\n          limit\n        }\n      });\n      return response.data.map(book => Book.fromJSON(book));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Tạo sách mới (admin only)\n  async createBook(bookData) {\n    try {\n      const response = await this.api.post('/', bookData);\n      return Book.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Cập nhật sách (admin only)\n  async updateBook(id, bookData) {\n    try {\n      const response = await this.api.put(`/${id}`, bookData);\n      return Book.fromJSON(response.data);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Xóa sách (admin only)\n  async deleteBook(id) {\n    try {\n      await this.api.delete(`/${id}`);\n      return true;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Xử lý lỗi\n  handleError(error) {\n    if (error.response) {\n      // Server trả về lỗi\n      return new Error(error.response.data.message || 'Có lỗi xảy ra từ server');\n    } else if (error.request) {\n      // Không thể kết nối đến server\n      return new Error('Không thể kết nối đến server');\n    } else {\n      // Lỗi khác\n      return new Error(error.message || 'Có lỗi xảy ra');\n    }\n  }\n}\nexport default new BookService();","map":{"version":3,"names":["axios","Book","API_BASE_URL","process","env","REACT_APP_API_URL","BookService","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","getAllBooks","params","response","get","data","map","book","fromJSON","handleError","getBookById","id","searchBooks","query","filters","q","getBooksByCategory","categoryId","getBestSellingBooks","limit","getNewestBooks","createBook","bookData","post","updateBook","put","deleteBook","delete","Error","message"],"sources":["D:/frontend/src/services/BookService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { Book } from '../models';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\nclass BookService {\r\n  constructor() {\r\n    this.api = axios.create({\r\n      baseURL: `${API_BASE_URL}/books`,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Request interceptor để thêm token\r\n    this.api.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Lấy danh sách tất cả sách\r\n  async getAllBooks(params = {}) {\r\n    try {\r\n      const response = await this.api.get('/', { params });\r\n      return response.data.map(book => Book.fromJSON(book));\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy sách theo ID\r\n  async getBookById(id) {\r\n    try {\r\n      const response = await this.api.get(`/${id}`);\r\n      return Book.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Tìm kiếm sách\r\n  async searchBooks(query, filters = {}) {\r\n    try {\r\n      const params = { q: query, ...filters };\r\n      const response = await this.api.get('/search', { params });\r\n      return response.data.map(book => Book.fromJSON(book));\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy sách theo danh mục\r\n  async getBooksByCategory(categoryId) {\r\n    try {\r\n      const response = await this.api.get(`/category/${categoryId}`);\r\n      return response.data.map(book => Book.fromJSON(book));\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy sách bán chạy\r\n  async getBestSellingBooks(limit = 10) {\r\n    try {\r\n      const response = await this.api.get('/bestselling', { params: { limit } });\r\n      return response.data.map(book => Book.fromJSON(book));\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy sách mới nhất\r\n  async getNewestBooks(limit = 10) {\r\n    try {\r\n      const response = await this.api.get('/newest', { params: { limit } });\r\n      return response.data.map(book => Book.fromJSON(book));\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Tạo sách mới (admin only)\r\n  async createBook(bookData) {\r\n    try {\r\n      const response = await this.api.post('/', bookData);\r\n      return Book.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Cập nhật sách (admin only)\r\n  async updateBook(id, bookData) {\r\n    try {\r\n      const response = await this.api.put(`/${id}`, bookData);\r\n      return Book.fromJSON(response.data);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Xóa sách (admin only)\r\n  async deleteBook(id) {\r\n    try {\r\n      await this.api.delete(`/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Xử lý lỗi\r\n  handleError(error) {\r\n    if (error.response) {\r\n      // Server trả về lỗi\r\n      return new Error(error.response.data.message || 'Có lỗi xảy ra từ server');\r\n    } else if (error.request) {\r\n      // Không thể kết nối đến server\r\n      return new Error('Không thể kết nối đến server');\r\n    } else {\r\n      // Lỗi khác\r\n      return new Error(error.message || 'Có lỗi xảy ra');\r\n    }\r\n  }\r\n}\r\n\r\nexport default new BookService();\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}