{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { OrderService } from '../services';\nimport { Order } from '../models';\nexport const useOrderController = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [currentOrder, setCurrentOrder] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [orderStats, setOrderStats] = useState(null);\n\n  // Tạo đơn hàng mới\n  const createOrder = useCallback(async orderData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const newOrder = await OrderService.createOrder(orderData);\n      setOrders(prev => [newOrder, ...prev]);\n      return newOrder;\n    } catch (err) {\n      setError(err.message);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Lấy danh sách đơn hàng của user\n  const fetchUserOrders = useCallback(async (params = {}) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await OrderService.getUserOrders(params);\n      setOrders(data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Lấy đơn hàng theo ID\n  const fetchOrderById = useCallback(async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const order = await OrderService.getOrderById(id);\n      setCurrentOrder(order);\n      return order;\n    } catch (err) {\n      setError(err.message);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Cập nhật trạng thái đơn hàng (admin)\n  const updateOrderStatus = useCallback(async (id, status) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const updatedOrder = await OrderService.updateOrderStatus(id, status);\n      setOrders(prev => prev.map(order => order.id === id ? updatedOrder : order));\n      if (currentOrder && currentOrder.id === id) {\n        setCurrentOrder(updatedOrder);\n      }\n      return updatedOrder;\n    } catch (err) {\n      setError(err.message);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentOrder]);\n\n  // Hủy đơn hàng\n  const cancelOrder = useCallback(async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const cancelledOrder = await OrderService.cancelOrder(id);\n      setOrders(prev => prev.map(order => order.id === id ? cancelledOrder : order));\n      if (currentOrder && currentOrder.id === id) {\n        setCurrentOrder(cancelledOrder);\n      }\n      return cancelledOrder;\n    } catch (err) {\n      setError(err.message);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentOrder]);\n\n  // Lấy tất cả đơn hàng (admin)\n  const fetchAllOrders = useCallback(async (params = {}) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await OrderService.getAllOrders(params);\n      setOrders(data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Lấy thống kê đơn hàng (admin)\n  const fetchOrderStats = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const stats = await OrderService.getOrderStats();\n      setOrderStats(stats);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Lọc đơn hàng theo trạng thái\n  const filterOrdersByStatus = useCallback(status => {\n    return orders.filter(order => order.status === status);\n  }, [orders]);\n\n  // Lọc đơn hàng theo ngày\n  const filterOrdersByDate = useCallback((startDate, endDate) => {\n    return orders.filter(order => {\n      const orderDate = new Date(order.createdAt);\n      return orderDate >= startDate && orderDate <= endDate;\n    });\n  }, [orders]);\n\n  // Tính tổng doanh thu\n  const calculateTotalRevenue = useCallback(() => {\n    return orders.reduce((total, order) => {\n      if (order.status === 'delivered') {\n        return total + order.total;\n      }\n      return total;\n    }, 0);\n  }, [orders]);\n\n  // Tính số đơn hàng theo trạng thái\n  const getOrderCountByStatus = useCallback(() => {\n    const statusCount = {};\n    orders.forEach(order => {\n      statusCount[order.status] = (statusCount[order.status] || 0) + 1;\n    });\n    return statusCount;\n  }, [orders]);\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return {\n    // State\n    orders,\n    currentOrder,\n    loading,\n    error,\n    orderStats,\n    // Actions\n    createOrder,\n    fetchUserOrders,\n    fetchOrderById,\n    updateOrderStatus,\n    cancelOrder,\n    fetchAllOrders,\n    fetchOrderStats,\n    filterOrdersByStatus,\n    filterOrdersByDate,\n    calculateTotalRevenue,\n    getOrderCountByStatus,\n    clearError\n  };\n};\n_s(useOrderController, \"FFG2wI80NcrJp+GLRSYMeTOOwII=\");","map":{"version":3,"names":["useState","useEffect","useCallback","OrderService","Order","useOrderController","_s","orders","setOrders","currentOrder","setCurrentOrder","loading","setLoading","error","setError","orderStats","setOrderStats","createOrder","orderData","newOrder","prev","err","message","fetchUserOrders","params","data","getUserOrders","fetchOrderById","id","order","getOrderById","updateOrderStatus","status","updatedOrder","map","cancelOrder","cancelledOrder","fetchAllOrders","getAllOrders","fetchOrderStats","stats","getOrderStats","filterOrdersByStatus","filter","filterOrdersByDate","startDate","endDate","orderDate","Date","createdAt","calculateTotalRevenue","reduce","total","getOrderCountByStatus","statusCount","forEach","clearError"],"sources":["D:/frontend/src/controllers/OrderController.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { OrderService } from '../services';\r\nimport { Order } from '../models';\r\n\r\nexport const useOrderController = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [currentOrder, setCurrentOrder] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [orderStats, setOrderStats] = useState(null);\r\n\r\n  // Tạo đơn hàng mới\r\n  const createOrder = useCallback(async (orderData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const newOrder = await OrderService.createOrder(orderData);\r\n      setOrders(prev => [newOrder, ...prev]);\r\n      return newOrder;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Lấy danh sách đơn hàng của user\r\n  const fetchUserOrders = useCallback(async (params = {}) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await OrderService.getUserOrders(params);\r\n      setOrders(data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Lấy đơn hàng theo ID\r\n  const fetchOrderById = useCallback(async (id) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const order = await OrderService.getOrderById(id);\r\n      setCurrentOrder(order);\r\n      return order;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Cập nhật trạng thái đơn hàng (admin)\r\n  const updateOrderStatus = useCallback(async (id, status) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const updatedOrder = await OrderService.updateOrderStatus(id, status);\r\n      setOrders(prev => prev.map(order => order.id === id ? updatedOrder : order));\r\n      if (currentOrder && currentOrder.id === id) {\r\n        setCurrentOrder(updatedOrder);\r\n      }\r\n      return updatedOrder;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentOrder]);\r\n\r\n  // Hủy đơn hàng\r\n  const cancelOrder = useCallback(async (id) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const cancelledOrder = await OrderService.cancelOrder(id);\r\n      setOrders(prev => prev.map(order => order.id === id ? cancelledOrder : order));\r\n      if (currentOrder && currentOrder.id === id) {\r\n        setCurrentOrder(cancelledOrder);\r\n      }\r\n      return cancelledOrder;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentOrder]);\r\n\r\n  // Lấy tất cả đơn hàng (admin)\r\n  const fetchAllOrders = useCallback(async (params = {}) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await OrderService.getAllOrders(params);\r\n      setOrders(data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Lấy thống kê đơn hàng (admin)\r\n  const fetchOrderStats = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const stats = await OrderService.getOrderStats();\r\n      setOrderStats(stats);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Lọc đơn hàng theo trạng thái\r\n  const filterOrdersByStatus = useCallback((status) => {\r\n    return orders.filter(order => order.status === status);\r\n  }, [orders]);\r\n\r\n  // Lọc đơn hàng theo ngày\r\n  const filterOrdersByDate = useCallback((startDate, endDate) => {\r\n    return orders.filter(order => {\r\n      const orderDate = new Date(order.createdAt);\r\n      return orderDate >= startDate && orderDate <= endDate;\r\n    });\r\n  }, [orders]);\r\n\r\n  // Tính tổng doanh thu\r\n  const calculateTotalRevenue = useCallback(() => {\r\n    return orders.reduce((total, order) => {\r\n      if (order.status === 'delivered') {\r\n        return total + order.total;\r\n      }\r\n      return total;\r\n    }, 0);\r\n  }, [orders]);\r\n\r\n  // Tính số đơn hàng theo trạng thái\r\n  const getOrderCountByStatus = useCallback(() => {\r\n    const statusCount = {};\r\n    orders.forEach(order => {\r\n      statusCount[order.status] = (statusCount[order.status] || 0) + 1;\r\n    });\r\n    return statusCount;\r\n  }, [orders]);\r\n\r\n  // Clear error\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    // State\r\n    orders,\r\n    currentOrder,\r\n    loading,\r\n    error,\r\n    orderStats,\r\n    \r\n    // Actions\r\n    createOrder,\r\n    fetchUserOrders,\r\n    fetchOrderById,\r\n    updateOrderStatus,\r\n    cancelOrder,\r\n    fetchAllOrders,\r\n    fetchOrderStats,\r\n    filterOrdersByStatus,\r\n    filterOrdersByDate,\r\n    calculateTotalRevenue,\r\n    getOrderCountByStatus,\r\n    clearError\r\n  };\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}