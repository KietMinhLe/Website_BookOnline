import React, { useState, useEffect } from 'react';
import { 
  Row, 
  Col, 
  Card, 
  Form, 
  Button, 
  Tab, 
  Tabs,
  Alert,
  InputGroup,
  Table,
  Badge
} from 'react-bootstrap';
import { 
  FaSave, 
  FaUpload, 
  FaEye, 
  FaEyeSlash,
  FaCog,
  FaStore,
  FaBell,
  FaShieldAlt,
  FaDatabase,
  FaPalette,
  FaGlobe
} from 'react-icons/fa';

const AdminSettingsPage = () => {
  const [activeTab, setActiveTab] = useState('general');
  const [showPassword, setShowPassword] = useState(false);
  const [settings, setSettings] = useState({
    // General Settings
    siteName: 'C·ª≠a h√†ng s√°ch ABC',
    siteDescription: 'C·ª≠a h√†ng s√°ch tr·ª±c tuy·∫øn h√†ng ƒë·∫ßu Vi·ªát Nam',
    siteUrl: 'https://bookstore-abc.com',
    adminEmail: 'admin@bookstore-abc.com',
    phone: '0123456789',
    address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
    
    // Store Settings
    currency: 'VND',
    currencySymbol: '‚Ç´',
    taxRate: 10,
    shippingFee: 30000,
    freeShippingThreshold: 500000,
    storeStatus: 'active',
    
    // Security Settings
    sessionTimeout: 30,
    maxLoginAttempts: 5,
    passwordMinLength: 8,
    requireTwoFactor: false,
    
    // Notification Settings
    emailNotifications: true,
    smsNotifications: false,
    orderNotifications: true,
    inventoryAlerts: true,
    lowStockThreshold: 10,
    
    // Appearance Settings
    theme: 'light',
    primaryColor: '#007bff',
    logo: '',
    favicon: '',
    
    // System Settings
    maintenanceMode: false,
    debugMode: false,
    cacheEnabled: true,
    autoBackup: true,
    backupFrequency: 'daily'
  });

  const [notifications, setNotifications] = useState([
    {
      id: 1,
      type: 'order',
      title: 'ƒê∆°n h√†ng m·ªõi',
      message: 'C√≥ ƒë∆°n h√†ng m·ªõi #ORD001 t·ª´ Nguy·ªÖn VƒÉn A',
      time: '2024-01-15 10:30',
      read: false
    },
    {
      id: 2,
      type: 'inventory',
      title: 'C·∫£nh b√°o t·ªìn kho',
      message: 'S√°ch "React.js c∆° b·∫£n" s·∫Øp h·∫øt h√†ng (c√≤n 5 b·∫£n)',
      time: '2024-01-15 09:15',
      read: false
    },
    {
      id: 3,
      type: 'system',
      title: 'C·∫≠p nh·∫≠t h·ªá th·ªëng',
      message: 'H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t l√™n phi√™n b·∫£n 2.1.0',
      time: '2024-01-14 16:45',
      read: true
    }
  ]);

  const [recentActivities, setRecentActivities] = useState([
    {
      id: 1,
      action: 'ƒêƒÉng nh·∫≠p',
      user: 'Admin',
      time: '2024-01-15 10:30',
      ip: '192.168.1.100'
    },
    {
      id: 2,
      action: 'Th√™m s√°ch m·ªõi',
      user: 'Admin',
      time: '2024-01-15 09:45',
      ip: '192.168.1.100'
    },
    {
      id: 3,
      action: 'C·∫≠p nh·∫≠t ƒë∆°n h√†ng',
      user: 'Admin',
      time: '2024-01-15 09:30',
      ip: '192.168.1.100'
    }
  ]);

  const handleInputChange = (field, value) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSaveSettings = () => {
    // L∆∞u c√†i ƒë·∫∑t
    console.log('Saving settings:', settings);
    alert('C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
  };

  const handleResetSettings = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset v·ªÅ c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh?')) {
      // Reset settings
      alert('C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c reset v·ªÅ m·∫∑c ƒë·ªãnh!');
    }
  };

  const handleUploadLogo = () => {
    // X·ª≠ l√Ω upload logo
    alert('T√≠nh nƒÉng upload logo s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai!');
  };

  const getNotificationIcon = (type) => {
    switch (type) {
      case 'order': return 'üõí';
      case 'inventory': return 'üì¶';
      case 'system': return '‚öôÔ∏è';
      default: return 'üì¢';
    }
  };

  const getNotificationBadge = (type) => {
    switch (type) {
      case 'order': return 'success';
      case 'inventory': return 'warning';
      case 'system': return 'info';
      default: return 'secondary';
    }
  };

  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>
          <FaCog className="me-2" />
          C√†i ƒë·∫∑t h·ªá th·ªëng
        </h2>
        <div className="d-flex gap-2">
          <Button variant="outline-secondary" onClick={handleResetSettings}>
            Reset m·∫∑c ƒë·ªãnh
          </Button>
          <Button variant="primary" onClick={handleSaveSettings}>
            <FaSave className="me-2" />
            L∆∞u c√†i ƒë·∫∑t
          </Button>
        </div>
      </div>

      <Tabs
        activeKey={activeTab}
        onSelect={(k) => setActiveTab(k)}
        className="mb-4"
      >
        {/* General Settings Tab */}
        <Tab eventKey="general" title={
          <span>
            <FaGlobe className="me-1" />
            T·ªïng quan
          </span>
        }>
          <Row>
            <Col md={8}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">Th√¥ng tin c∆° b·∫£n</h5>
                </Card.Header>
                <Card.Body>
                  <Row>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>T√™n c·ª≠a h√†ng *</Form.Label>
                        <Form.Control
                          type="text"
                          value={settings.siteName}
                          onChange={(e) => handleInputChange('siteName', e.target.value)}
                          placeholder="Nh·∫≠p t√™n c·ª≠a h√†ng"
                        />
                      </Form.Group>
                    </Col>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Email qu·∫£n tr·ªã *</Form.Label>
                        <Form.Control
                          type="email"
                          value={settings.adminEmail}
                          onChange={(e) => handleInputChange('adminEmail', e.target.value)}
                          placeholder="admin@example.com"
                        />
                      </Form.Group>
                    </Col>
                  </Row>

                  <Form.Group className="mb-3">
                    <Form.Label>M√¥ t·∫£ c·ª≠a h√†ng</Form.Label>
                    <Form.Control
                      as="textarea"
                      rows={3}
                      value={settings.siteDescription}
                      onChange={(e) => handleInputChange('siteDescription', e.target.value)}
                      placeholder="M√¥ t·∫£ v·ªÅ c·ª≠a h√†ng..."
                    />
                  </Form.Group>

                  <Row>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>URL website</Form.Label>
                        <Form.Control
                          type="url"
                          value={settings.siteUrl}
                          onChange={(e) => handleInputChange('siteUrl', e.target.value)}
                          placeholder="https://example.com"
                        />
                      </Form.Group>
                    </Col>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>S·ªë ƒëi·ªán tho·∫°i</Form.Label>
                        <Form.Control
                          type="tel"
                          value={settings.phone}
                          onChange={(e) => handleInputChange('phone', e.target.value)}
                          placeholder="0123456789"
                        />
                      </Form.Group>
                    </Col>
                  </Row>

                  <Form.Group className="mb-3">
                    <Form.Label>ƒê·ªãa ch·ªâ</Form.Label>
                    <Form.Control
                      as="textarea"
                      rows={2}
                      value={settings.address}
                      onChange={(e) => handleInputChange('address', e.target.value)}
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ª≠a h√†ng..."
                    />
                  </Form.Group>
                </Card.Body>
              </Card>
            </Col>

            <Col md={4}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">Logo c·ª≠a h√†ng</h5>
                </Card.Header>
                <Card.Body className="text-center">
                  <div 
                    className="logo-preview mb-3"
                    style={{
                      width: '150px',
                      height: '150px',
                      border: '2px dashed #dee2e6',
                      borderRadius: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      margin: '0 auto',
                      backgroundColor: '#f8f9fa'
                    }}
                  >
                    {settings.logo ? (
                      <img src={settings.logo} alt="Logo" style={{maxWidth: '100%', maxHeight: '100%'}} />
                    ) : (
                      <div className="text-muted">
                        <FaStore size={48} />
                        <div className="mt-2">Ch∆∞a c√≥ logo</div>
                      </div>
                    )}
                  </div>
                  <Button variant="outline-primary" onClick={handleUploadLogo}>
                    <FaUpload className="me-2" />
                    Upload logo
                  </Button>
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>

        {/* Store Settings Tab */}
        <Tab eventKey="store" title={
          <span>
            <FaStore className="me-1" />
            C·ª≠a h√†ng
          </span>
        }>
          <Card>
            <Card.Header>
              <h5 className="mb-0">C√†i ƒë·∫∑t c·ª≠a h√†ng</h5>
            </Card.Header>
            <Card.Body>
              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Ti·ªÅn t·ªá</Form.Label>
                    <Form.Select
                      value={settings.currency}
                      onChange={(e) => handleInputChange('currency', e.target.value)}
                    >
                      <option value="VND">Vi·ªát Nam ƒê·ªìng (VND)</option>
                      <option value="USD">US Dollar (USD)</option>
                      <option value="EUR">Euro (EUR)</option>
                    </Form.Select>
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>K√Ω hi·ªáu ti·ªÅn t·ªá</Form.Label>
                    <Form.Control
                      type="text"
                      value={settings.currencySymbol}
                      onChange={(e) => handleInputChange('currencySymbol', e.target.value)}
                      placeholder="‚Ç´"
                    />
                  </Form.Group>
                </Col>
              </Row>

              <Row>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>Thu·∫ø VAT (%)</Form.Label>
                    <Form.Control
                      type="number"
                      value={settings.taxRate}
                      onChange={(e) => handleInputChange('taxRate', e.target.value)}
                      min="0"
                      max="100"
                    />
                  </Form.Group>
                </Col>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>Ph√≠ v·∫≠n chuy·ªÉn (VNƒê)</Form.Label>
                    <Form.Control
                      type="number"
                      value={settings.shippingFee}
                      onChange={(e) => handleInputChange('shippingFee', e.target.value)}
                      min="0"
                    />
                  </Form.Group>
                </Col>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>Mi·ªÖn ph√≠ ship t·ª´ (VNƒê)</Form.Label>
                    <Form.Control
                      type="number"
                      value={settings.freeShippingThreshold}
                      onChange={(e) => handleInputChange('freeShippingThreshold', e.target.value)}
                      min="0"
                    />
                  </Form.Group>
                </Col>
              </Row>

              <Form.Group className="mb-3">
                <Form.Label>Tr·∫°ng th√°i c·ª≠a h√†ng</Form.Label>
                <Form.Select
                  value={settings.storeStatus}
                  onChange={(e) => handleInputChange('storeStatus', e.target.value)}
                >
                  <option value="active">Ho·∫°t ƒë·ªông</option>
                  <option value="maintenance">B·∫£o tr√¨</option>
                  <option value="closed">ƒê√≥ng c·ª≠a</option>
                </Form.Select>
              </Form.Group>
            </Card.Body>
          </Card>
        </Tab>

        {/* Security Settings Tab */}
        <Tab eventKey="security" title={
          <span>
            <FaShieldAlt className="me-1" />
            B·∫£o m·∫≠t
          </span>
        }>
          <Card>
            <Card.Header>
              <h5 className="mb-0">C√†i ƒë·∫∑t b·∫£o m·∫≠t</h5>
            </Card.Header>
            <Card.Body>
              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Th·ªùi gian timeout phi√™n (ph√∫t)</Form.Label>
                    <Form.Control
                      type="number"
                      value={settings.sessionTimeout}
                      onChange={(e) => handleInputChange('sessionTimeout', e.target.value)}
                      min="5"
                      max="480"
                    />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>S·ªë l·∫ßn ƒëƒÉng nh·∫≠p sai t·ªëi ƒëa</Form.Label>
                    <Form.Control
                      type="number"
                      value={settings.maxLoginAttempts}
                      onChange={(e) => handleInputChange('maxLoginAttempts', e.target.value)}
                      min="3"
                      max="10"
                    />
                  </Form.Group>
                </Col>
              </Row>

              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>ƒê·ªô d√†i m·∫≠t kh·∫©u t·ªëi thi·ªÉu</Form.Label>
                    <Form.Control
                      type="number"
                      value={settings.passwordMinLength}
                      onChange={(e) => handleInputChange('passwordMinLength', e.target.value)}
                      min="6"
                      max="20"
                    />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>X√°c th·ª±c 2 y·∫øu t·ªë</Form.Label>
                    <Form.Check
                      type="switch"
                      id="requireTwoFactor"
                      label="Y√™u c·∫ßu x√°c th·ª±c 2 y·∫øu t·ªë"
                      checked={settings.requireTwoFactor}
                      onChange={(e) => handleInputChange('requireTwoFactor', e.target.checked)}
                    />
                  </Form.Group>
                </Col>
              </Row>

              <Alert variant="info">
                <strong>L∆∞u √Ω:</strong> C√†i ƒë·∫∑t b·∫£o m·∫≠t s·∫Ω c√≥ hi·ªáu l·ª±c ngay l·∫≠p t·ª©c v√† √°p d·ª•ng cho t·∫•t c·∫£ ng∆∞·ªùi d√πng.
              </Alert>
            </Card.Body>
          </Card>
        </Tab>

        {/* Notifications Tab */}
        <Tab eventKey="notifications" title={
          <span>
            <FaBell className="me-1" />
            Th√¥ng b√°o
          </span>
        }>
          <Row>
            <Col md={8}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">C√†i ƒë·∫∑t th√¥ng b√°o</h5>
                </Card.Header>
                <Card.Body>
                  <Form.Group className="mb-3">
                    <Form.Check
                      type="switch"
                      id="emailNotifications"
                      label="Th√¥ng b√°o qua email"
                      checked={settings.emailNotifications}
                      onChange={(e) => handleInputChange('emailNotifications', e.target.checked)}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Check
                      type="switch"
                      id="smsNotifications"
                      label="Th√¥ng b√°o qua SMS"
                      checked={settings.smsNotifications}
                      onChange={(e) => handleInputChange('smsNotifications', e.target.checked)}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Check
                      type="switch"
                      id="orderNotifications"
                      label="Th√¥ng b√°o ƒë∆°n h√†ng m·ªõi"
                      checked={settings.orderNotifications}
                      onChange={(e) => handleInputChange('orderNotifications', e.target.checked)}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Check
                      type="switch"
                      id="inventoryAlerts"
                      label="C·∫£nh b√°o t·ªìn kho"
                      checked={settings.inventoryAlerts}
                      onChange={(e) => handleInputChange('inventoryAlerts', e.target.checked)}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label>Ng∆∞·ª°ng c·∫£nh b√°o t·ªìn kho th·∫•p</Form.Label>
                    <Form.Control
                      type="number"
                      value={settings.lowStockThreshold}
                      onChange={(e) => handleInputChange('lowStockThreshold', e.target.value)}
                      min="1"
                      max="100"
                    />
                  </Form.Group>
                </Card.Body>
              </Card>
            </Col>

            <Col md={4}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">Th√¥ng b√°o g·∫ßn ƒë√¢y</h5>
                </Card.Header>
                <Card.Body>
                  {notifications.map((notification) => (
                    <div key={notification.id} className={`d-flex align-items-start mb-3 p-2 ${!notification.read ? 'bg-light' : ''}`}>
                      <div className="me-2">
                        {getNotificationIcon(notification.type)}
                      </div>
                      <div className="flex-grow-1">
                        <div className="d-flex justify-content-between align-items-start">
                          <h6 className="mb-1">{notification.title}</h6>
                          <Badge bg={getNotificationBadge(notification.type)} size="sm">
                            {notification.type}
                          </Badge>
                        </div>
                        <p className="mb-1 small text-muted">{notification.message}</p>
                        <small className="text-muted">{notification.time}</small>
                      </div>
                    </div>
                  ))}
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>

        {/* System Tab */}
        <Tab eventKey="system" title={
          <span>
            <FaDatabase className="me-1" />
            H·ªá th·ªëng
          </span>
        }>
          <Row>
            <Col md={8}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">C√†i ƒë·∫∑t h·ªá th·ªëng</h5>
                </Card.Header>
                <Card.Body>
                  <Form.Group className="mb-3">
                    <Form.Check
                      type="switch"
                      id="maintenanceMode"
                      label="Ch·∫ø ƒë·ªô b·∫£o tr√¨"
                      checked={settings.maintenanceMode}
                      onChange={(e) => handleInputChange('maintenanceMode', e.target.checked)}
                    />
                    <Form.Text className="text-muted">
                      Khi b·∫≠t, website s·∫Ω hi·ªÉn th·ªã trang b·∫£o tr√¨ cho ng∆∞·ªùi d√πng
                    </Form.Text>
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Check
                      type="switch"
                      id="debugMode"
                      label="Ch·∫ø ƒë·ªô debug"
                      checked={settings.debugMode}
                      onChange={(e) => handleInputChange('debugMode', e.target.checked)}
                    />
                    <Form.Text className="text-muted">
                      Hi·ªÉn th·ªã th√¥ng tin debug chi ti·∫øt (ch·ªâ d√†nh cho developer)
                    </Form.Text>
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Check
                      type="switch"
                      id="cacheEnabled"
                      label="B·∫≠t cache"
                      checked={settings.cacheEnabled}
                      onChange={(e) => handleInputChange('cacheEnabled', e.target.checked)}
                    />
                    <Form.Text className="text-muted">
                      Cache gi√∫p tƒÉng t·ªëc ƒë·ªô t·∫£i trang
                    </Form.Text>
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Check
                      type="switch"
                      id="autoBackup"
                      label="T·ª± ƒë·ªông sao l∆∞u"
                      checked={settings.autoBackup}
                      onChange={(e) => handleInputChange('autoBackup', e.target.checked)}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label>T·∫ßn su·∫•t sao l∆∞u</Form.Label>
                    <Form.Select
                      value={settings.backupFrequency}
                      onChange={(e) => handleInputChange('backupFrequency', e.target.value)}
                    >
                      <option value="hourly">H√†ng gi·ªù</option>
                      <option value="daily">H√†ng ng√†y</option>
                      <option value="weekly">H√†ng tu·∫ßn</option>
                      <option value="monthly">H√†ng th√°ng</option>
                    </Form.Select>
                  </Form.Group>
                </Card.Body>
              </Card>
            </Col>

            <Col md={4}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h5>
                </Card.Header>
                <Card.Body>
                  <Table responsive size="sm">
                    <thead>
                      <tr>
                        <th>H√†nh ƒë·ªông</th>
                        <th>Ng∆∞·ªùi d√πng</th>
                        <th>Th·ªùi gian</th>
                      </tr>
                    </thead>
                    <tbody>
                      {recentActivities.map((activity) => (
                        <tr key={activity.id}>
                          <td>{activity.action}</td>
                          <td>{activity.user}</td>
                          <td>
                            <small>{activity.time}</small>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </Table>
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>
      </Tabs>
    </div>
  );
};

export default AdminSettingsPage;
